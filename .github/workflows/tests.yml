name: "Run Tests"

on:
  pull_request:
    branches:
      - "**"
    paths-ignore:
      - "documentation/**"
      - "README.md"

jobs:
  all_tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2.2'
        bundler-cache: true

    - name: Run Rspec
      run: |
        bundle exec rspec -fd > rspec-output.txt

    - name: Run Cucumber
      run: |
        bundle exec rails cucumber 
    
    - name: Capture Coverage Score
      run: |
        score=$(cat rspec-output.txt | grep 'Coverage report generated for RSpec: ' | awk 'match($0, /LOC \(([0-9]+\.[0-9]+%)\) covered/, arr) { print(arr[1]) }')
        echo "COVERAGE_SCORE=$score" >> $GITHUB_ENV

    - name: Delete previous comments
      uses: actions/github-script@v7
      with:
        script: |
          const issue_number = context.issue.number;
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number,
          });

          const botName = 'github-actions[bot]';

          for (const comment of comments.data) {
            if (comment.user.login === botName && comment.body.startsWith('Coverage')) {
                  await github.rest.issues.deleteComment({
                      owner,
                      repo,
                      comment_id: comment.id,
                  });
              }
          }

    - name: Comment PR with Coverage report and score
      uses: actions/github-script@v7
      with:
        script: |
          const artifactUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
          const score = process.env.COVERAGE_SCORE;
          const prComment = `Coverage: ${score}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: prComment
          });
